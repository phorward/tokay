# Tokay default prelude

Not : @<P> {
    P reject
    Void
}

Peek : @<P> {
    P reset
}

Expect : @<P> msg=void {
    accept P
    error(msg || "Expecting " + *P + ", but got " + repr((Token | Char | "end-of-file")))
}

Repeat : @<
    P,          # Parselet
    min: 1,     # minimum occurence
    max: void,  # maximum occurence, void for unlimited
    blur: true  # result blurrying; empty list becomes void, one-item list becomes item
> {
    res = ()

    loop {
        P {
            res.push($1)
            if max && res.len == max break
        }

        if res.len < min reject
        break
    }

    if blur {
        if res.len == 0 {
            accept void
        }
        else if res.len == 1 {
            accept res[0]
        }
    }

    res
}

Pos : @<P, blur: true>{ Repeat<P, blur: blur> }
Kle : @<P, blur: true>{ Repeat<P, min: 0, blur: blur> || void }
Opt : @<P>{ P | Void }

List : @<P, Separator: (',' _), empty: true> {
    Self Separator P   $1 + $3
    if empty (Self Separator)   # allows for trailing Separator
    P  ($1, )
}

Number : Float | Int
Token : Word | Number | AsciiPunctuation

# print("=> ", XKle<'a'>)
